//? ## Example 1 - –ë–∞–∑–æ–≤—ñ –æ–ø–µ—Ä–∞—Ü—ñ—ó –∑ –º–∞—Å–∏–≤–æ–º

// 1. –°—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ –∑ –µ–ª–µ–º–µ–Ω—Ç–∞–º–∏ 'Jazz' –∏ 'Blues'
const genres = ['Jazz', 'Blues'];
// console.log(genres);

// 2. –î–æ–¥–∞—Ç–∏ 'Rock' –≤ –∫—ñ–Ω–µ—Ü—å –º–∞—Å–∏–≤—É.

genres.push('Rock');
// console.log(genres);

// 3. –í–∏–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤–∞ (–Ω–µ –≤–∏–¥–∞–ª—è—é—á–∏ –π–æ–≥–æ)

// console.log(genres[0]);

// 4. –í–∏–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –æ—Å—Ç–∞–Ω–Ω—ñ–π —ç–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤–∞. –ú–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ—ó –¥–æ–≤–∂–∏–Ω–∏.

// console.log(genres[genres.length - 1]);

// 5. –í–∏–¥–∞–ª–∏—Ç–∏ –∑ –º–∞—Å–∏–≤—É –ø–µ—Ä—à–∏–π –µ–ª–µ–º–µ–Ω—Ç —ñ –≤–∏–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å.
genres.shift(1);
// console.log(genres);

//  6. –î–æ–¥–∞—Ç–∏ ¬´Country¬ª —ñ ¬´Reggy¬ª –≤ –ø–æ—á–∞—Ç–æ–∫ –º–∞—Å–∏–≤—É (–∑–±–µ—Ä–µ–≥—Ç–∏ –ø–æ—Ä—è–¥–æ–∫).
genres.unshift('Country', 'Reggy');
// console.log(genres);

//? ## Example 2 - –ú–∞—Å–∏–≤–∏ —ñ —Å—Ç—Ä–æ–∫–∏
/* 
–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è –ø–ª–æ—â—ñ –ø—Ä—è–º–æ–∫—É—Ç–Ω–∏–∫–∞ –∑—ñ —Å—Ç–æ—Ä–æ–Ω–∞–º–∏, –¥–æ–≤–∂–∏–Ω—É —è–∫–∏—Ö
–æ—Ç—Ä–∏–º—É—î–º–æ —É –∑–º—ñ–Ω–Ω—ñ–π `sides` —É –≤–∏–≥–ª—è–¥—ñ —Å—Ç—Ä–æ–∫–∏.
–ó–Ω–∞—á–µ–Ω–Ω—è –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ —Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –æ–¥–Ω–∏–º –ø—Ä–æ–±—ñ–ª–æ–º
*/

const sides = '7 10';
const stringtoArray = sides.split(' ');
const area–°alculation = stringtoArray[0] * stringtoArray[1];
// console.log('Area:', area–°alculation);

//TODO ## Example 3 - –ü–µ—Ä–µ–±–æ—Ä –º–∞—Å–∏–≤—ñ–≤, —É–º–æ–≤–∏
/*
 * –ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–±–æ—Ä—É –º–∞—Å–∏–≤–∞ `fruits` —Ü–∏–∫–ª–æ–º `for`.
 * –î–ª—è –∫–æ–∂–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç—É –≤–∏–≤–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å —Å—Ç—Ä–æ–∫—É —Ñ–æ—Ä–º–∞—Ç–∞ `–Ω–æ–º–µ—Ä_–µ–ª–µ–º–µ–Ω—Ç–∞: –∑–Ω–∞—á–µ–Ω–Ω—è_—ç–ª–µ–º–µ–Ω—Ç–∞`.
 * –ù—É–º–µ—Ä–∞—Ü–∏—ñ—è –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å –∑ `1`.
 */

// —É—Å–∫–ª–∞–¥–Ω–µ–Ω–Ω—è - –ù–ï –≤–∏–≤–æ–¥–∏—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª—å –¥–∞–Ω—ñ —è–∫—â–æ —Ñ—Ä—É–∫—Ç–∏ –º—ñ—Å—Ç—è—Ç—å—Å—è –≤ –º–∞—Å–∏–≤—ñ fruitsToIgnore
// const fruitsToIgnore = ['üçå', 'üçã'];

const fruits = ['üçé', 'üçá', 'üçë', 'üçå', 'üçã'];
const fruitsToIgnore = ['üçå', 'üçã'];

for (let i = 0; i < fruits.length; i += 1) {
  if (fruitsToIgnore.includes(fruits[i])) {
    continue;
  }

  // console.log(`${i + 1}: ${fruits[i]}`);
}

//? ## Example 4 - –ú–∞—Å–∏–≤–∏ —ñ —Ü–∏–∫–ª–∏
/*
–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç —â–æ –≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å —ñ–º'—è —ñ —Ç–µ–ª–µ—Ñ–æ–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤.
–£ –∑–º—ñ–Ω–Ω–∏—Ö `names` —ñ `phones` –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è —Å—Ç—Ä–æ–∫–∏ —ñ–º–µ–Ω —ñ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤,
—Ä–æ–∑–¥—ñ–ª–µ–Ω—ñ –∫–æ–º–∞–º–∏.
–ü–æ—Ä—è–¥–æ–∫ —ñ–º–µ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –ø–æ—Ä—è–¥–∫—É –Ω–æ–º–µ—Ä—ñ–≤.
–ö—ñ–ª—å–∫—ñ—Å—Ç—å —ñ–º–µ–Ω –∏ —Ç–µ–ª–µ—Ñ–æ–Ω—ñ–≤ –≥–∞—Ä–∞–Ω—Ç–æ–≤–∞–Ω–æ –æ–¥–Ω–∞–∫–æ–≤–∞.
  - –û–±—Ä–∞—Ç–∏ –∑—Ä—É—á–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç
*/

const names = 'Jacob,William,Solomon,Nicolas';
const phones = '89001234567,89001112233,890055566377,890055566300';

const namesSplittoArray = names.split(',');
const phonesSplittoArray = phones.split(',');

for (let i = 0; i < namesSplittoArray.length; i += 1) {
  const name = namesSplittoArray[i];
  const phone = phonesSplittoArray[i];

  // console.log(`Name: ${name}, phone: ${phone}`);
}

// ? –ú–∞—Å–∏–≤–∏ —ñ —Å—Ç—Ä–æ–∫–∏
//? ## Example 5
/*
–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç —â–æ –≤–∏–≤–æ–¥–∏—Ç—å –≤ –∫–æ–Ω—Å–æ–ª—å –∑–∞–¥–∞–Ω—É —Ñ—Ä–∞–∑—É –±–µ–∑ –ø–µ—Ä—à–æ–≥–æ —ñ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Å–ª—ñ–≤.
–§—ñ–Ω–∞–ª—å–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –º–∞—î –ø–æ—á–∏–Ω–∞—Ç–∏—Å—å —á–∏ –∑–∞–∫—ñ–Ω—á—É–≤–∞—Ç–∏—Å—å –ø—Ä–æ–±—ñ–ª–æ–º.
–°–∫—Ä–∏–ø—Ç –º–∞—î –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –¥–ª—è –±—É–¥—å-—è–∫–æ—ó —Å—Ç—Ä–æ–∫–∏.
*/

// const phrase = 'Welcome to the bright future';
// const phrasetoArray = phrase.split(' ');
// phrasetoArray.pop();
// phrasetoArray.shift();
// const cutPhrase = phrasetoArray.join(' ');

// console.log(cutPhrase);

//? ## Example 6
/*
–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç —è–∫–∏–π ¬´—Ä–æ–∑–≤–µ—Ä–Ω–µ¬ª —Å—Ç—Ä–æ–∫—É (–∑–≤–æ—Ä–æ—Ç–Ω—ñ–π –ø–æ—Ä—è–¥–æ–∫ –ª—ñ—Ç–µ—Ä) —ñ –≤–∏–≤–µ–¥–µ –≤ –∫–æ–Ω—Å–æ–ª—å.
–¢—Ä–∏ –≤–∞—Ä—ñ–∞–Ω—Ç–∏ - —Ü–∏–∫–ª for (–±–µ–∑ –º–∞—Å–∏–≤—ñ–≤), —Ü–∏–∫–ª for-of + –º–∞—Å–∏–≤–∏, –±–µ–∑ —Ü–∏–∫–ª—ñ–≤?
*/

// v1 —Ü–∏–∫–ª for (–±–µ–∑ –º–∞—Å–∏–≤—ñ–≤)
// const phrase = 'Welcome to the future';
// let reversed = '';

// for (let i = phrase.length - 1; i >= 0; i--) {
//   const item = phrase.charAt(i);

//   reversed += item;
// }

// console.log(reversed);

// v2 for-of + –º–∞—Å–∏–≤–∏
// const phrase = 'Welcome to the future';
// const chars = phrase.split('');
// const reversedArray = [];

// for (let item of chars) {
//   reversedArray.unshift(item);
// }

// const reversed = reversedArray.join('');

// console.log('reversed:', reversed);

// v3 - reverse!
// const chars = phrase.split('');
// const reversed = chars.reverse().join('');

// console.log('reversed:', reversed);

//? ## Example 7 - –ü–æ—à—É–∫ –µ–ª–µ–º–µ–Ω—Ç–∞
/*
–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç –ø–æ—à—É–∫—É –Ω–∞–π–º–µ–Ω—à–æ–≥–æ —á–∏—Å–ª–∞ –≤ –º–∞—Å—Å–∏–≤–µ. –ß–∏ —î –≤–∞—Ä—ñ–∞–Ω—Ç–∏?
*/

//v1
// const numbers = [2, 17, 94, 1, 23, 37];
// const test = Math.min(...numbers);

//v2
// const numbers = [2, 17, 94, 1, 23, 37];
// let minNumber = numbers[0];

// for (let i = 0; i < numbers.length; i += 1) {
//   if (numbers[i] < minNumber) {
//     minNumber = numbers[i];
//   }
// }

// console.log('minNumber', minNumber);

//? ## Example 8 - –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤–∞ —Å —Ü–∏–∫–ª–æ–º
/*
–ù–∞–ø–∏—Å–∞—Ç–∏ —Å–∫—Ä–∏–ø—Ç —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É —Å—Ç—Ä–æ–∫ –≤ –∞–ª—Ñ–∞–≤—ñ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É.
*/

// const langs = ['python', 'javascript', 'c++', 'haskel', 'php', 'ruby', 'ada'];
